// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password_hash String
  avatar_url    String?
  role          String    @default("student")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login    DateTime?

  // Relations
  focusSessions  FocusSession[]
  focusMetrics   FocusMetric[]
  rewardHistories RewardHistory[]
}

model FocusSession {
  session_id   Int       @id @default(autoincrement())
  user_id      Int
  start_time   DateTime
  end_time     DateTime
  duration     Int
  session_type String
  is_successful Boolean

  // Relations
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model FocusMetric {
  metric_id       Int      @id @default(autoincrement())
  user_id         Int
  date            DateTime @default(now())
  total_focus_time Int
  sessions_completed Int
  streak_count    Int
  longest_streak  Int
  badge_awarded   String?

  // Relations
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Badge {
  badge_id   Int      @id @default(autoincrement())
  name       String
  description String
  image_url  String
  criteria   String
  created_at DateTime @default(now())

  // Relations
  rewardHistories RewardHistory[]
}

model RewardHistory {
  reward_id    Int      @id @default(autoincrement())
  user_id      Int
  badge_id     Int
  awarded_at   DateTime @default(now())
  description  String?

  // Relations
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  badge Badge @relation(fields: [badge_id], references: [badge_id], onDelete: Cascade)
}